{"file":"ChatBubble.vue.mjs","mappings":";;;;;;;;AAoJM,UAAA,SAAS,IAAI,KAAK;AAClB,UAAA,eAAe,IAAI,KAAK;AACxB,UAAA,YAAY,IAAI,EAAE;AAClB,UAAA,WAAW,IAAI,EAAE;AACjB,UAAA,YAAY,IAAI,KAAK;AACrB,UAAA,oBAAoB,IAAI,IAAI;AAsB5B,UAAA,gBAAgB,CAAC,SAAS;AACvB,aAAA,KAAK,QAAQ,OAAO,MAAM;AAAA,IACnC;AA4DA,UAAM,UAAU,YAAY;AAC1B,YAAM,SAAS;AACf,UAAI,kBAAkB,OAAO;AACT,0BAAA,MAAM,YAAY,kBAAkB,MAAM;AAAA,MAAA;AAAA,IAC9D,GACC,EAAE,MAAM,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../components/ChatBubble.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Chat Bubble Button -->\n    <button\n      @click=\"toggleChat\"\n      class=\"fixed bottom-6 right-6 bg-primary text-white rounded-full p-4 shadow-lg hover:bg-primary-dark transition-all duration-300 z-50 flex items-center justify-center\"\n      :class=\"{ 'rotate-45': isOpen }\"\n    >\n      <ChatBubbleLeftRightIcon v-if=\"!isOpen\" class=\"h-6 w-6\" />\n      <XMarkIcon v-else class=\"h-6 w-6\" />\n    </button>\n\n    <!-- Chat Window -->\n    <div\n      v-show=\"isOpen\"\n      class=\"fixed bottom-24 right-6 w-[calc(100%-3rem)] sm:w-80 md:w-96 bg-white rounded-lg shadow-xl z-50 overflow-hidden transition-all duration-300 flex flex-col\"\n      :class=\"{ 'translate-y-0 opacity-100': isOpen, 'translate-y-8 opacity-0': !isOpen }\"\n      style=\"max-height: 70vh; max-width: 24rem;\"\n    >\n      <!-- Chat Header -->\n      <div class=\"bg-primary text-white p-4 flex justify-between items-center\">\n        <div class=\"flex items-center\">\n          <ChatBubbleLeftRightIcon class=\"h-5 w-5 mr-2\" />\n          <h3 class=\"font-medium\">SorglosPflege Beratung</h3>\n        </div>\n        <button @click=\"toggleChat\" class=\"text-white hover:text-gray-200\">\n          <XMarkIcon class=\"h-5 w-5\" />\n        </button>\n      </div>\n\n      <!-- Consent Banner (if not consented) -->\n      <div v-if=\"!hasConsented\" class=\"p-4 bg-white flex-grow overflow-y-auto\">\n        <div class=\"bg-gray-50 p-4 rounded-lg mb-4\">\n          <h4 class=\"font-bold text-gray-900 mb-2\">Datenschutzhinweis</h4>\n          <p class=\"text-sm text-gray-700 mb-4\">\n            Dieser Chat verwendet KI-Technologie, um Ihre Fragen zu beantworten. Ihre Eingaben werden verarbeitet, um passende Antworten zu generieren. Bitte beachten Sie, dass:\n          </p>\n          <ul class=\"text-sm text-gray-700 list-disc pl-5 mb-4 space-y-1\">\n            <li>Ihre Chatdaten zur Verbesserung des Services gespeichert werden können</li>\n            <li>Die KI-generierten Antworten nicht immer zu 100% korrekt sind</li>\n            <li>Keine sensiblen persönlichen Daten wie Passwörter eingegeben werden sollten</li>\n          </ul>\n          <button\n            @click=\"giveConsent\"\n            class=\"w-full btn-primary text-sm py-2\"\n          >\n            Ich stimme zu und möchte den Chat nutzen\n          </button>\n        </div>\n      </div>\n\n      <!-- Chat Messages (if consented) -->\n      <div v-else class=\"flex-grow overflow-y-auto p-4\" ref=\"messagesContainer\">\n        <div class=\"space-y-4\">\n          <!-- Welcome Message -->\n          <div class=\"flex items-start\">\n            <div class=\"flex-shrink-0 bg-primary text-white rounded-full p-2 mr-3\">\n              <ChatBubbleLeftRightIcon class=\"h-5 w-5\" />\n            </div>\n            <div class=\"bg-gray-100 rounded-lg p-3 max-w-[80%]\">\n              <p class=\"text-gray-800\">\n                Hallo! Ich bin Ihr digitaler Pflegeberater. Wie kann ich Ihnen heute helfen?\n              </p>\n            </div>\n          </div>\n\n          <!-- AI Disclaimer -->\n          <div class=\"flex items-start\">\n            <div class=\"flex-shrink-0 bg-primary text-white rounded-full p-2 mr-3\">\n              <InformationCircleIcon class=\"h-5 w-5\" />\n            </div>\n            <div class=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 max-w-[80%]\">\n              <p class=\"text-sm text-yellow-800\">\n                <strong>Hinweis:</strong> Ich bin ein KI-Assistent und meine Antworten können Fehler enthalten. Bei wichtigen Entscheidungen konsultieren Sie bitte einen menschlichen Berater.\n              </p>\n            </div>\n          </div>\n\n          <!-- Dynamic Messages -->\n          <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"flex items-start\" :class=\"{ 'justify-end': message.isUser }\">\n            <template v-if=\"!message.isUser\">\n              <div class=\"flex-shrink-0 bg-primary text-white rounded-full p-2 mr-3\">\n                <ChatBubbleLeftRightIcon class=\"h-5 w-5\" />\n              </div>\n              <div class=\"bg-gray-100 rounded-lg p-3 max-w-[80%]\">\n                <p class=\"text-gray-800\" v-html=\"formatMessage(message.text)\"></p>\n              </div>\n            </template>\n            <template v-else>\n              <div class=\"bg-primary text-white rounded-lg p-3 max-w-[80%]\">\n                <p>{{ message.text }}</p>\n              </div>\n              <div class=\"flex-shrink-0 bg-gray-200 rounded-full p-2 ml-3\">\n                <UserIcon class=\"h-5 w-5 text-gray-600\" />\n              </div>\n            </template>\n          </div>\n\n          <!-- Loading Animation -->\n          <div v-if=\"isLoading\" class=\"flex items-start\">\n            <div class=\"flex-shrink-0 bg-primary text-white rounded-full p-2 mr-3\">\n              <ChatBubbleLeftRightIcon class=\"h-5 w-5\" />\n            </div>\n            <div class=\"bg-gray-100 rounded-lg p-4 max-w-[80%] flex items-center\">\n              <div class=\"typing-animation\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Chat Input (if consented) -->\n      <div v-if=\"hasConsented\" class=\"border-t border-gray-200 p-4 bg-white\">\n        <form @submit.prevent=\"sendMessage\" class=\"flex items-center\">\n          <input\n            v-model=\"userInput\"\n            type=\"text\"\n            placeholder=\"Ihre Frage eingeben...\"\n            class=\"flex-grow border border-gray-300 rounded-l-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n            :disabled=\"isLoading\"\n          />\n          <button\n            type=\"submit\"\n            class=\"bg-primary text-white px-4 py-2 rounded-r-lg hover:bg-primary-dark transition-colors duration-300 disabled:opacity-50 h-[38px]\"\n            :disabled=\"isLoading || !userInput.trim()\"\n          >\n            <PaperAirplaneIcon class=\"h-5 w-5\" />\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { \n  ChatBubbleLeftRightIcon, \n  XMarkIcon, \n  UserIcon, \n  PaperAirplaneIcon,\n  InformationCircleIcon\n} from '@heroicons/vue/24/outline';\n\n// State\nconst isOpen = ref(false);\nconst hasConsented = ref(false);\nconst userInput = ref('');\nconst messages = ref([]);\nconst isLoading = ref(false);\nconst messagesContainer = ref(null);\n\n// Check if user has previously consented\nonMounted(() => {\n  const savedConsent = localStorage.getItem('chatConsent');\n  if (savedConsent === 'true') {\n    hasConsented.value = true;\n  }\n});\n\n// Toggle chat window\nconst toggleChat = () => {\n  isOpen.value = !isOpen.value;\n};\n\n// Give consent to data processing\nconst giveConsent = () => {\n  hasConsented.value = true;\n  localStorage.setItem('chatConsent', 'true');\n};\n\n// Format message with line breaks\nconst formatMessage = (text) => {\n  return text.replace(/\\n/g, '<br>');\n};\n\n// Send message to Flowise API\nconst sendMessage = async () => {\n  if (!userInput.value.trim() || isLoading.value) return;\n  \n  // Add user message to chat\n  const userMessage = userInput.value;\n  messages.value.push({ text: userMessage, isUser: true });\n  userInput.value = '';\n  \n  // Show loading animation\n  isLoading.value = true;\n  \n  try {\n    // Scroll to bottom\n    await nextTick();\n    if (messagesContainer.value) {\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n    }\n    \n    // Call Flowise API\n    const response = await query({ question: userMessage });\n    \n    // Add AI response to chat\n    messages.value.push({ text: response.text || \"Entschuldigung, ich konnte keine Antwort generieren. Bitte versuchen Sie es erneut.\", isUser: false });\n  } catch (error) {\n    console.error('Error querying Flowise API:', error);\n    messages.value.push({ \n      text: \"Es ist ein Fehler aufgetreten. Bitte versuchen Sie es später erneut.\", \n      isUser: false \n    });\n  } finally {\n    isLoading.value = false;\n    \n    // Scroll to bottom again after response\n    await nextTick();\n    if (messagesContainer.value) {\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n    }\n  }\n};\n\n// Flowise API query function\nasync function query(data) {\n  const response = await fetch(\n    \"https://flowise.maximilianpaszke.de/api/v1/prediction/b52a4ca7-de36-4b7c-9b27-4b44bd252687\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }\n  );\n  const result = await response.json();\n  return result;\n}\n\n// Auto-scroll when messages change\nwatch(messages, async () => {\n  await nextTick();\n  if (messagesContainer.value) {\n    messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n  }\n}, { deep: true });\n</script>\n\n<style scoped>\n/* Typing animation */\n.typing-animation {\n  display: flex;\n  align-items: center;\n}\n\n.typing-animation span {\n  height: 8px;\n  width: 8px;\n  margin: 0 2px;\n  background-color: #6B7280;\n  border-radius: 50%;\n  display: inline-block;\n  animation: bounce 1.5s infinite ease-in-out;\n}\n\n.typing-animation span:nth-child(1) {\n  animation-delay: -0.3s;\n}\n\n.typing-animation span:nth-child(2) {\n  animation-delay: -0.15s;\n}\n\n@keyframes bounce {\n  0%, 80%, 100% { \n    transform: scale(0);\n  }\n  40% { \n    transform: scale(1);\n  }\n}\n\n/* Transitions */\n.translate-y-0 {\n  transform: translateY(0);\n}\n\n.translate-y-8 {\n  transform: translateY(2rem);\n}\n\n.opacity-0 {\n  opacity: 0;\n}\n\n.opacity-100 {\n  opacity: 1;\n}\n</style>\n"],"version":3}